<?php

namespace UsersBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\Session;
use UsersBundle\Form\Type\LoginType;
use UsersBundle\Form\Type\RegisterType;
use UsersBundle\Form\Type\EditUserType;
use UsersBundle\Form\Type\ChangePasswordType;
use UsersBundle\Form\Type\ChangeUsersType;
use UsersBundle\Form\Type\ReturnType;
use UsersBundle\Form\Type\ProcessReturnType;
use UsersBundle\Entity\Usuario;
use UsersBundle\Entity\Pedido;
use UsersBundle\Entity\Linea_pedido;
use UsersBundle\Entity\Devolucion;
use ProductsBundle\Entity\Producto;
use UsersBundle\Event\LogEvent;



class UsersController extends Controller


{
    
	/******************************   POSTLOGIN  ************************************************************/     
    
    public function loginAction(Request $request)
    {
		$session = $request->getSession();
		
		//compruebo si la cuenta del usuario está activa
		
		if($this->getUser()->getIsActive() == false){	
			$session->getFlashBag()->set('error_login', 'Tu cuenta está inactiva, contacta con el Administrador');
			return $this->redirect($this->generateUrl('home'));
		}
		
		//inicializo la sesion
		
		$session->set('id_usuario', $this->getUser()->getId());
		$session->set('username', $this->getUser()->getUsername());
		$session->set('rol',$this->getUser()->getRoles()[0]);
		
		if($session->has('idioma') && $this->getUser()->getRoles()[0] == 'ROLE_USER'){
			return $this->redirect($this->generateUrl('home',array('_locale'=>'en')));
		}	
		return $this->redirect($this->generateUrl('home'));

	}    	
    
/******************************   REGISTER   ************************************************************/    
    
    
    public function registerAction(Request $request)
    {
    	$session = $request->getSession();
    	  
		//formulario de registro
		
 		$usuario = new Usuario(false);
    	$form = $this->createForm(new RegisterType(),$usuario);  
		$form->handleRequest($request);
		if($form->isValid()){
		
		//compruebo si las contraseñas coinciden
		
		if($form->get('password')->getData() != $form->get('repassword')->getData()){
			$mt = $this->get('translator')->trans('Las contraseñas no coinciden', array(), 'sms');
			$session->getFlashBag()->set('mensaje_error', $mt);
			return $this->redirect($this->generateUrl('register'));
		}
		//compruebo si el username ya está en la bd
		
			$user=$this->getDoctrine()->getRepository('UsersBundle:Usuario')->findOneByUsername($form->get('username')->getData());
			if($user==null){
				
			//registro correcto
			
				$plainPassword = $form->get('password')->getData();
				$encoder = $this->container->get('security.password_encoder');
				$encoded = $encoder->encodePassword($usuario, $plainPassword);
				$usuario->setPassword($encoded);
			
				$em = $this->getDoctrine()->getManager();
				$em->persist($usuario);
				$em->flush();
				
				$mt = $this->get('translator')->trans('Te has registrado con éxito, Inicia sesión para acceder a tu cuenta', array(), 'sms');
				$session->getFlashBag()->add('mensaje_exito', $mt);
				$mensaje = "Nuevo usuario registrado: ". $form->get('username')->getData();
				$this->get('event_dispatcher')->dispatch('add.log', new LogEvent($mensaje));
				return $this->redirect($this->generateUrl('home'));				
			}
			else{
				
			//registro incorrecto, el nombre de usuario ya está registrado	
			
				$mt = $this->get('translator')->trans('Nombre de usuario en uso');
				$session->getFlashBag()->add('mensaje_error', $mt);
				return $this->redirect($this->generateUrl('register'));	
			}		
		}
      return $this->render('UsersBundle:Users:register.html.twig',array('form' => $form->createView()));
    }
    
    
  /******************************   SHOW PROFILE  ************************************************************/    
    
    
    public function showAction(Request $request, $username)
    {
    	
    	//obtengo el usuario y renderizo a la plantilla
    	
    	$session = $request->getSession();
    	if($username!=$session->get('username')){
			return $this->redirect($this->generateUrl('error'));			
		}   	
    	$user=$this->getUser();
    	
      return $this->render('UsersBundle:Users:show.html.twig', array('user' => $user));
    }
    
    
  /******************************   EDIT PROFILE  ************************************************************/    
    
    public function editAction(Request $request,$username)
    {
		$session = $request->getSession();
		if($username!=$session->get('username')){
			return $this->redirect($this->generateUrl('error'));			
		}   	
    	
		//obtengo el usuario y creo el formulario   	
    	
    	$user = $this->getUser();
    	$form = $this->createForm(new EditUserType(),$user);  
		$form->handleRequest($request);
		if($form->isValid()){
			
			//modifico perfil
			
			$em=$this->getDoctrine()->getManager();
			$em->persist($user);
			$em->flush();
			$mt = $this->get('translator')->trans('Perfil modificado con éxito');
			$session->getFlashBag()->add('mensaje_exito', $mt);
			return $this->redirect($this->generateUrl('show_profile',array('username'=>$user->getUsername())));				
		}
      return $this->render('UsersBundle:Users:edit.html.twig',array('user' => $user, 'form' => $form->createView()));
    }
    
    /******************************   CHANGE PASSWORD  ************************************************************/ 
    
    public function changePasswAction(Request $request,$username)
    {
    	$session=$request->getSession();
    	if($username!=$session->get('username')){
			return $this->redirect($this->generateUrl('error'));			
		} 
		$user = $this->getUser();  	
    	$form = $this->createForm(new ChangePasswordType());  
		$form->handleRequest($request);  
		if($form->isValid()){
			
			//compruebo su password
			
			$plainPassword = $form->get('actual_password')->getData();
			$encoded = sha1($plainPassword);
			$session->set('ver',$encoded);
			
			if($user->getPassword()!=$encoded){
				$mt = $this->get('translator')->trans('Su password actual no coincide con el introducido');
				$session->getFlashBag()->add('mensaje_error', $mt);
				return $this->redirect($this->generateUrl('change_password',array('username'=>$session->get('username'))));
			}
			
			//compruebo los nuevos passwords
			
			elseif($form->get('new_password')->getData() != $form->get('new_password2')->getData()){
				$mt = $this->get('translator')->trans('Los nuevos passwords no coinciden');
				$session->getFlashBag()->add('mensaje_error', $mt);
				return $this->redirect($this->generateUrl('change_password',array('username'=>$session->get('username'))));
			}
			else{
				
				//actualizo el password
				
				$plainPassword = $form->get('new_password')->getData();
				$encoder = $this->container->get('security.password_encoder');
				$encoded = $encoder->encodePassword($user, $plainPassword);
				$user->setPassword($encoded);
				
				$session->set('password',$encoded);
				$em=$this->getDoctrine()->getManager();
				$em->persist($user);
				$em->flush();
				$mt = $this->get('translator')->trans('Password modificado con éxito');
				$session->getFlashBag()->add('mensaje_exito', $mt);
				return $this->redirect($this->generateUrl('show_profile',array('username'=>$session->get('username'))));				
			}
		}
    	return $this->render('UsersBundle:Users:change_password.html.twig',array('form' => $form->createView()));
    }
   
 /******************************   LOG OUT  ************************************************************/    
    
    public function logoutAction(Request $request)
    {
    	$session = $request->getSession();
    	$session->invalidate();
    	return $this->redirect($this->generateUrl('home'));
    }
    	
  /******************************   MANAGE USERS  ************************************************************/     
    
    public function manageUsersAction()
    {
    	
    	$users = $this->getDoctrine()->getRepository('UsersBundle:Usuario')->findAll();
    	return $this->render('UsersBundle:Users:manage_users.html.twig', array('users' => $users));
    }
    
    /******************************   CHANGE USERS  ************************************************************/     
    
    public function changeUsersAction($id, Request $request)
    {
    	
		//obtengo el usuario y creo el formulario    	
    	
    	$user = $this->getDoctrine()->getRepository('UsersBundle:Usuario')->find($id);
    	$form = $this->createForm(new ChangeUsersType());  
    	$form->handleRequest($request);  
		if($form->isValid()){
			$rol = $request->request->get('rol');
			$activo = $request->request->get('inactivo');
			if($activo == null){
				$activo = true;			
			}
			else{
				$activo = false;		
			}
			$user->setRoles($rol);
			$user->setIsActive($activo);
			$em = $this->getDoctrine()->getManager();
			$em->persist($user);
			$em->flush();
			return $this->redirect($this->generateUrl('manage_users'));
		}
    	return $this->render('UsersBundle:Users:change_users.html.twig', array('user' => $user,'form' => $form->createView()));
    }
	
		/******************************  CHANGE LANGUAJE ************************************************************/     
    
    public function changeLanguajeAction(Request $request)
    {
    	
   	$session = $request->getSession();
   	$ruta = $request->headers->get('referer');
   	
   	//si no hay idioma en la sesion, el idioma esta en castellano
   	
    		if(!$session->has('idioma')){ 
    			$session->set('idioma','en');
    			if(substr($ruta, -1) == "/"){ // la ruta es index
    				return $this->redirect($this->generateUrl('home',array('_locale'=>'en')));
    			}
    			else{
    	
					$miruta = str_replace('/es/','/en/',$ruta);
    				return $this->redirect($miruta);
				}
    		}
    		else{
				$session->remove('idioma');
				if(substr($ruta, -3) == "/en"){ // la ruta es index
    				return $this->redirect($this->generateUrl('home',array('_locale'=>'es')));
    			}
				$miruta = str_replace('/en/','/es/',$ruta);
    			return $this->redirect($miruta);
				    		
    		}
	}
}
